== WHAT THIS IS, AND HOW IT WORKS

btcltcratio polls a web service to retrieve the current prices for bitcoin 
and litecoin, and stores them in a database. This information is then used
to present to the user a historical view of the ratio between those two
prices. Research 'Trading Gold Silver Ratio' for info on why that is useful.

As the application begins, it launches two threads. One to poll the web
service, and another to calculate the ratio over various time periods. These
are called the 'polling thread', and the 'update cache thread' respectively.

The polling thread uses a PubtickerReader to get the data which it then puts
into a Pubticker object. Pubticker is an ActiveRecord so it can be considered
a row in the Pubticker table in the database. 

The update cache thread uses a collection of worker classes called 
PubtickerCachers to do its work. For each PubtickerCacher, the thread tells 
it to do its thing. Each PubtickerCacher is written to do the necessary 
calculations for its assigned time period. So, for instance, there is a 
WeekPubtickerCacher which reads Pubticker table rows for the past week, and 
creates a single row in the PubtickerCacher table with the values it calculates.

The project is divided up between a data recording portion (btcltcratio), a
view or UI portion which reads the data and presents it to the user, and a
gem which contains code the two projects share.

There is an INSTALL script which can be used to easily set up a DigitalOcean
droplet from scratch.

== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version
2.2.2p95

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
